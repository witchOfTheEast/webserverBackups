#!/bin/bash

# Purpose: 
#   Collect backup files from webservers by pulling from remote servers
#   Copy and rename files locally to match the retention scheme
#   Rotate and remove files falling out of the retention period
#
# Guidelines:
#   Each backup file is to be a single archived and compressed file containing
#   all files deemed relevant by the webmaster
#
#   Files will be retrieved via scp or sftp
#   Retrieval must use a asymmetric key pair

## Variables
current_date="$(date +%Y%m%0d_%H%M)"

currentYear=$(date +%Y)
maxYears=6
oldestYear=$(expr $currentYear - $maxYears)

#currentMonth="$(date +%m)"
currentMonth=01
maxMonths=12 # This doesn't actually do anything. The number of months to use 
             #is set in the for loop within monthly_rotation ()

#currentDay="$(date +%0d)"
currentDay=01

dest_dir="/home/webadmin/backups/"
old_dir="/home/webadmin/backups/removedBackups/"
file_extention=".tar.gz2"

#src_serverNames=(amm lm mam)
src_serverNames=(amm)

echo "The source server names are: ${src_serverNames[@]}"

is_directory () {
    # Return when the argument is longer than 0 and a valid directory
    # exit if not
    # Argument: $1

    if [[ -z $1 ]]; then
        echo "Received argument of length 0";
        exit 1;
    elif [[ ! -d $1 ]]; then
            echo "$1 is not a valid directory";
            exit 1;
    else
        return;
    fi;
}

list_files () {
    # Return a list of files for the specified directory
    #
    # Arguments: $1 -> a directory path

    is_directory $1;
    ls $1;

}

count_files () {
    # Return the number of files in a directory matching a specified backup
    # category
    #
    # Arguments: $1 -> a directory path
    #            $2 -> file backup category; one of ( daily | monthly | yearly )

    is_directory $1;
    path=${1};
    
    if [[ -z $2 ]]; then
        echo "$2 is not a valid argument";
        exit 1;

    else
        category=${2}
        case ${category} in 
            daily)
                ls $1 | grep -i daily | wc -l;
                ;;
            monthly)
                ls $1 | grep -i monthly | wc -l;
                ;;
            yearly) 
                ls $1 | grep -i yearly | wc -l;
                ;;
                
            *)
                echo "$2 is not a valid argument";
                exit 1;
                ;;
        esac;
    fi; 
}

daily_rotation () {
    # Remove files older than 7 days from a directory
    #
    # Arguments: $1 -> a directory path

    is_directory $1;
    path=${1};
    
    keyword=daily

    file_count=$(count_files $path $keyword);
    
    echo "Total number of $keyword files: $file_count";

    if [[ ${file_count} -ge 7 ]]; then
        echo "There are too many $keyword files";
        echo "";
        echo "Files older than 7x24 hours from $current_date";
        find ${path} -mtime +7 -iname "*daily*";
        
        echo "";
        echo "These files will be ''deleted'' to ${old_dir}";
        find ${path} -mtime +7 -iname "*daily*" -exec mv '{}' ${old_dir} \; ;
        
    fi;

}

monthly_rotation() {
    # Remove files older than 6 months from a directory
    # For younger than 6 months, remove all but the oldest file for that month
    #
    # Arguments: $1 -> a directory path
    is_directory $1;
    path=${1};

    keyword=monthly

    file_count=$(count_files $path $keyword);
    
    echo "Total number of $keyword files: $file_count";
    echo ""
    ls ${path} | grep $keyword 

    echo "Deleting files older than $(expr 346 / 30 ) months";
    # Using +346 to catch files from the previous year/current month
    find ${path} -mtime +346 -iname "*monthly*" -exec rm '{}' \;

    # Important to only select files of the monthly category
    unsortedArray=($(find ${path} -iname "*monthly*" -printf "%TY,%Tm,%Td,%T@,%p\n"))
    sortedByYear=($(echo "${unsortedArray[@]}" | tr " " "\n" | sort | tr " " "\n"))

    activeYear=$currentYear
    activeMonth=$currentMonth
    
    # This range sets how many months to count back
    for i in {0..11}; do
            echo -e "\n********************************************************************************";
        activeYear=$(date -d "-${i} month" +%Y);
        activeMonth=$(date -d "-${i} month" +%m);
            echo "Active year/month: ${activeYear}/$activeMonth";

        selectedYearMonth=($(echo "${sortedByYear[@]}" |  awk -F, -vyear="$activeYear" -vmonth="$activeMonth" 'BEGIN { RS = " " }; $1 == year && $2 == month { print $0 }'));
        numberOfElements=${#selectedYearMonth[@]};
        lastIndex=$(expr ${#selectedYearMonth[@]} - 1);
        
            echo "There are ${#selectedYearMonth[@]} elements";
            echo "";
            echo ${selectedYearMonth[@]} | tr " " "\n";
            echo "";

        if [[ ${numberOfElements} -gt 1 ]]; then
                echo -e "Items to delete:\n";
                echo ${selectedYearMonth[@]:1:${lastIndex}} | tr " " "\n";
                echo "";
                echo "Deleting...";

            rm $(echo ${selectedYearMonth[@]:1:${lastIndex}} | awk -F, 'BEGIN { RS = " " }; { print $5 }');

                echo -e "Confirming the remaining files:\n";    
            ls ${path} | grep $keyword | grep ${activeYear} | grep ${activeMonth}

            else
                echo "One file found per year/month. No additional files to delete.";
        fi;

    done;

    echo -e "\nNow there should be a maximum of ${maxMonths} $keyword files"

        ls ${path} | grep $keyword 

}

yearly_rotation() {

    # Remove files older than 5 years from a directory
    # For files younger that 5 years, remove all but the oldest file in that year
    #echo "";
    is_directory $1;
    path=$1

    keyword=yearly
   
    file_count=$(count_files $path $keyword);
    
    echo "Total number of $keyword files: $file_count";

    echo "Look at all the files"
    echo ""
    ls ${path} | grep yearly

    echo "Deleting files older than $(expr 1825 / 365) years.";
    # 5 years equals 1825 days
    find ${path} -mtime +1825 -iname "*yearly*" -exec rm '{}' \;


    unsortedArray=($(find ${path} -iname "*yearly*" -printf "%TY,%Tm,%Td,%T@,%p\n"))
    sortedByYear=($(echo "${unsortedArray[@]}" | tr " " "\n" | sort | tr " " "\n"))

    activeYear=$currentYear

    while [[ $activeYear -gt $oldestYear ]]; do
            echo "The year is: $activeYear";
            echo "";

        selectedYear=($(echo "${sortedByYear[@]}" |  awk -F, -vyear="$activeYear" 'BEGIN { RS = " " }; $1 == year { print $0 }'));
        numberOfElements=${#selectedYear[@]};
        lastIndex=$(expr ${#selectedYear[@]} - 1);


            echo "There are ${#selectedYear[@]} elements";
            echo "";
            echo "The first element is: ${selectedYear[0]}";
            echo "";
            echo "The last element is: ${selectedYear[-1]}";
            echo "";
            echo -e "All the elements:\n";
            echo ${selectedYear[@]} | tr " " "\n";
            echo "";
            echo -e "A similar list from ls and grep\n";

            ls ${path} | grep ${activeYear}

            echo "";

        if [[ ${numberOfElements} -gt 1 ]]; then
                echo -e "Items to delete:\n";
                echo ${selectedYear[@]:1:${lastIndex}} | tr " " "\n";
                echo "";
                echo "Deleting...";
                echo "";

            rm $(echo ${selectedYear[@]:1:${lastIndex}} | awk -F, 'BEGIN { RS = " " }; { print $5 }');

                echo "";
                echo -e "Confirming the remaining files:\n";    
            ls ${path} | grep ${activeYear}

                echo "";
                echo "********";
            else
                echo "One file found per year. No additional files to delete.";
        fi;
        let "activeYear -= 1";

    done;

    echo "Now there should be a maximum of ${maxYears} ${keyword} files";

        ls ${path} | grep yearly

}

main () {
    for i in ${src_serverNames[@]}; do
        server_name="${i}"
        filename="${server_name}_${current_date}${file_extention}";
        path="${dest_dir}${server_name}/";
        echo "Backup file name:  $filename";
        echo "Destination path: $path";
        echo "";

        if [[ ! -d ${path} ]]; then
            mkdir -p ${path};
        fi;
#        daily_rotation $path;
        
        if [[ ${currentDay} == 01 ]]; then 
            echo "It's the first of the month. Let's do the monthly rotation.";
#            monthly_rotation $path;

            if [[ ${currentMonth} == 01 ]];  then
                echo "It's January. Let's do the yearly rotation." 
                yearly_rotation $path;
            
            fi;
        fi;

    done;
}

main;
